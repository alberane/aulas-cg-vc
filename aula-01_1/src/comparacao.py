"""
Aula 1 - Compara√ß√£o entre Computa√ß√£o Gr√°fica e Vis√£o Computacional
Demonstra√ß√£o pr√°tica das diferen√ßas entre OpenGL e OpenCV

Este programa mostra:
1. OpenGL: S√≠ntese de uma imagem simples
2. OpenCV: An√°lise da imagem gerada
3. Matplotlib: Visualiza√ß√£o dos resultados
"""

import time

import cv2
import matplotlib.pyplot as plt
import numpy as np


class ToolsComparison:
    def __init__(self):
        self.width = 400
        self.height = 400

    def create_synthetic_scene(self):
        """
        COMPUTA√á√ÉO GR√ÅFICA: S√≠ntese de uma cena simples
        Cria uma imagem artificial com formas geom√©tricas
        """
        print("=== COMPUTA√á√ÉO GR√ÅFICA: S√≠ntese de Imagem ===")

        # Criar canvas vazio (fundo preto)
        image = np.zeros((self.height, self.width, 3), dtype=np.uint8)

        # Adicionar formas geom√©tricas usando OpenCV (simulando renderiza√ß√£o)

        # 1. Ret√¢ngulo azul
        cv2.rectangle(image, (50, 50), (150, 150), (255, 0, 0), -1)  # BGR: azul

        # 2. C√≠rculo verde
        cv2.circle(image, (300, 100), 50, (0, 255, 0), -1)  # BGR: verde

        # 3. Tri√¢ngulo vermelho
        triangle_points = np.array([[200, 200], [300, 350], [100, 350]], np.int32)
        cv2.fillPoly(image, [triangle_points], (0, 0, 255))  # BGR: vermelho

        # 4. Linha branca
        cv2.line(image, (0, 200), (400, 200), (255, 255, 255), 3)

        # 5. Texto
        cv2.putText(image, 'CG Scene', (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)

        print("‚úì Cena sint√©tica criada com:")
        print("  - 1 ret√¢ngulo azul")
        print("  - 1 c√≠rculo verde")
        print("  - 1 tri√¢ngulo vermelho")
        print("  - 1 linha branca")
        print("  - Texto informativo")

        return image

    def analyze_scene(self, image):
        """
        VIS√ÉO COMPUTACIONAL: An√°lise da imagem
        Extrai informa√ß√µes e caracter√≠sticas da imagem
        """
        print("\n=== VIS√ÉO COMPUTACIONAL: An√°lise de Imagem ===")

        results = {}

        # 1. Converter para diferentes espa√ßos de cor
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

        # 2. Detec√ß√£o de bordas
        edges = cv2.Canny(gray, 50, 150)

        # 3. Detec√ß√£o de contornos
        contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        # 4. An√°lise de cores dominantes
        pixels = image.reshape(-1, 3)
        non_black_pixels = pixels[np.any(pixels > [10, 10, 10], axis=1)]

        if len(non_black_pixels) > 0:
            unique_colors, counts = np.unique(non_black_pixels, axis=0, return_counts=True)
            dominant_colors = unique_colors[np.argsort(counts)[-3:]]  # Top 3 cores
        else:
            dominant_colors = []

        # 5. Detec√ß√£o de formas usando aproxima√ß√£o de contornos
        shapes_detected = []
        for contour in contours:
            if cv2.contourArea(contour) > 100:  # Filtrar contornos muito pequenos
                # Aproximar contorno
                epsilon = 0.02 * cv2.arcLength(contour, True)
                approx = cv2.approxPolyDP(contour, epsilon, True)

                # Classificar forma baseado no n√∫mero de v√©rtices
                vertices = len(approx)
                if vertices == 3:
                    shapes_detected.append("Tri√¢ngulo")
                elif vertices == 4:
                    shapes_detected.append("Ret√¢ngulo")
                elif vertices > 8:
                    shapes_detected.append("C√≠rculo")
                else:
                    shapes_detected.append(f"Pol√≠gono ({vertices} v√©rtices)")

        # 6. Estat√≠sticas da imagem
        results = {
            'dimensions': image.shape,
            'total_contours': len(contours),
            'shapes_detected': shapes_detected,
            'dominant_colors': dominant_colors,
            'edge_pixels': np.sum(edges > 0),
            'non_black_pixels': len(non_black_pixels),
            'brightness_mean': np.mean(gray),
            'brightness_std': np.std(gray)
        }

        # Imprimir resultados da an√°lise
        print("‚úì An√°lise completada:")
        print(f"  - Dimens√µes: {results['dimensions']}")
        print(f"  - Contornos detectados: {results['total_contours']}")
        print(f"  - Formas identificadas: {', '.join(results['shapes_detected'])}")
        print(f"  - Pixels de borda: {results['edge_pixels']}")
        print(f"  - Pixels n√£o-pretos: {results['non_black_pixels']}")
        print(f"  - Brilho m√©dio: {results['brightness_mean']:.1f}")
        print(f"  - Desvio padr√£o do brilho: {results['brightness_std']:.1f}")

        return results, gray, edges, hsv

    def create_visualization(self, original, gray, edges, hsv, results):
        """
        Criar visualiza√ß√£o comparativa usando Matplotlib
        """
        print("\n=== VISUALIZA√á√ÉO: Compara√ß√£o dos Resultados ===")

        # Configurar figura com subplots
        fig, axes = plt.subplots(2, 3, figsize=(15, 10))
        fig.suptitle('Computa√ß√£o Gr√°fica vs Vis√£o Computacional', fontsize=16, fontweight='bold')

        # 1. Imagem original (s√≠ntese CG)
        axes[0, 0].imshow(cv2.cvtColor(original, cv2.COLOR_BGR2RGB))
        axes[0, 0].set_title('S√çNTESE: Imagem Original\n(Computa√ß√£o Gr√°fica)', fontweight='bold')
        axes[0, 0].axis('off')

        # 2. Imagem em escala de cinza
        axes[0, 1].imshow(gray, cmap='gray')
        axes[0, 1].set_title('AN√ÅLISE: Escala de Cinza\n(Vis√£o Computacional)', fontweight='bold')
        axes[0, 1].axis('off')

        # 3. Detec√ß√£o de bordas
        axes[0, 2].imshow(edges, cmap='gray')
        axes[0, 2].set_title('AN√ÅLISE: Detec√ß√£o de Bordas\n(Canny Edge Detection)', fontweight='bold')
        axes[0, 2].axis('off')

        # 4. Espa√ßo de cor HSV
        axes[1, 0].imshow(cv2.cvtColor(hsv, cv2.COLOR_HSV2RGB))
        axes[1, 0].set_title('AN√ÅLISE: Espa√ßo HSV\n(Hue-Saturation-Value)', fontweight='bold')
        axes[1, 0].axis('off')

        # 5. Histograma de intensidades
        axes[1, 1].hist(gray.flatten(), bins=50, color='gray', alpha=0.7)
        axes[1, 1].set_title('AN√ÅLISE: Histograma\n(Distribui√ß√£o de Intensidades)', fontweight='bold')
        axes[1, 1].set_xlabel('Intensidade')
        axes[1, 1].set_ylabel('Frequ√™ncia')
        axes[1, 1].grid(True, alpha=0.3)

        # 6. Cores dominantes
        if len(results['dominant_colors']) > 0:
            colors_normalized = results['dominant_colors'] / 255.0
            # Converter BGR para RGB para matplotlib
            colors_rgb = colors_normalized[:, [2, 1, 0]]  # Inverter BGR para RGB

            axes[1, 2].pie([1]*len(colors_rgb), colors=colors_rgb,
                          labels=[f'Cor {i+1}' for i in range(len(colors_rgb))],
                          autopct='%1.1f%%')
            axes[1, 2].set_title('AN√ÅLISE: Cores Dominantes\n(Palette Extraction)', fontweight='bold')
        else:
            axes[1, 2].text(0.5, 0.5, 'Nenhuma cor\ndominante detectada',
                           ha='center', va='center', transform=axes[1, 2].transAxes)
            axes[1, 2].set_title('AN√ÅLISE: Cores Dominantes\n(Palette Extraction)', fontweight='bold')

        plt.tight_layout()
        plt.show()

        print("Visualiza√ß√£o criada com 6 pain√©is comparativos")

    def demonstrate_pipeline(self):
        """
        Demonstra o pipeline completo: S√≠ntese ‚Üí An√°lise ‚Üí Visualiza√ß√£o
        """
        print("DEMONSTRA√á√ÉO: Pipeline Computa√ß√£o Gr√°fica ‚Üî Vis√£o Computacional")
        print("=" * 70)

        start_time = time.time()

        # Etapa 1: S√≠ntese (Computa√ß√£o Gr√°fica)
        print("\n ETAPA 1: S√≠ntese de Imagem")
        synthetic_image = self.create_synthetic_scene()

        # Etapa 2: An√°lise (Vis√£o Computacional)
        print("\nüîç ETAPA 2: An√°lise da Imagem")
        results, gray, edges, hsv = self.analyze_scene(synthetic_image)

        # Etapa 3: Visualiza√ß√£o dos resultados
        print("\nETAPA 3: Visualiza√ß√£o Comparativa")
        self.create_visualization(synthetic_image, gray, edges, hsv, results)

        total_time = time.time() - start_time
        print(f"\nPipeline executado em {total_time:.2f} segundos")

        # Salvar imagem original
        cv2.imwrite('synthetic_scene.png', synthetic_image)
        print(" Imagem salva como 'synthetic_scene.png'")

        return synthetic_image, results

    def interactive_demo(self):
        """
        Demonstra√ß√£o interativa com diferentes par√¢metros
        """
        print("\n" + "="*50)
        print("DEMONSTRA√á√ÉO")
        print("="*50)

        # Par√¢metros configur√°veis
        configs = [
            {"name": "Cena Simples", "shapes": 3, "colors": 3},
            {"name": "Cena Complexa", "shapes": 5, "colors": 5},
            {"name": "Cena Monocrom√°tica", "shapes": 2, "colors": 1}
        ]

        for i, config in enumerate(configs):
            print(f"\n--- Configura√ß√£o {i+1}: {config['name']} ---")

            # Criar cena com par√¢metros espec√≠ficos
            scene = self.create_synthetic_scene()

            # An√°lise r√°pida
            results, _, _, _ = self.analyze_scene(scene)

            print(f"Formas detectadas: {len(results['shapes_detected'])}")
            print(f"Complexidade (contornos): {results['total_contours']}")


def main():
    """Fun√ß√£o principal da demonstra√ß√£o"""
    print("AULA 1 - INTRODU√á√ÉO √Ä CG e VC")
    print("Demonstra√ß√£o: Computa√ß√£o Gr√°fica vs Vis√£o Computacional")
    print("="*60)

    try:
        # Criar inst√¢ncia da demonstra√ß√£o
        demo = ToolsComparison()

        # Executar pipeline completo
        image, results = demo.demonstrate_pipeline()

        # Demonstra√ß√£o interativa adicional
        demo.interactive_demo()

        print("\n" + "="*60)
        print("RESUMO DA DEMONSTRA√á√ÉO:")
        print("Computa√ß√£o Gr√°fica: Criou uma cena sint√©tica")
        print("Vis√£o Computacional: Analisou e extraiu caracter√≠sticas")
        print("Visualiza√ß√£o: Comparou os resultados lado a lado")
        print("\nCONCLUS√ÉO:")
        print(" CG e VC s√£o √°reas complementares")
        print(" CG: Modelo ‚Üí Imagem (S√≠ntese)")
        print(" VC: Imagem ‚Üí Informa√ß√£o (An√°lise)")
        print(" Ambas usam matem√°tica e algoritmos similares")
        print("="*60)

    except Exception as e:
        print(f"Erro durante execu√ß√£o: {e}")
        print("Verifique se todas as depend√™ncias est√£o instaladas:")
        print("pip install opencv-python matplotlib numpy")


if __name__ == "__main__":
    main()